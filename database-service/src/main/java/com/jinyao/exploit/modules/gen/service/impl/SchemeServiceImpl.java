/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.jinyao.exploit.modules.gen.service.impl;

import com.jinyao.exploit.common.entity.Page;
import com.jinyao.exploit.common.entity.data.BaseService;
import com.jinyao.exploit.common.entity.data.CrudServiceImpl;
import com.jinyao.exploit.common.utils.StringUtils;
import com.jinyao.exploit.modules.gen.dao.SchemeDao;
import com.jinyao.exploit.modules.gen.dao.TableColumnDao;
import com.jinyao.exploit.modules.gen.dao.TableDao;
import com.jinyao.exploit.modules.gen.entity.*;
import com.jinyao.exploit.modules.gen.service.SchemeService;
import com.jinyao.exploit.modules.gen.util.GenUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

/**
 * 生成方案Service
 * @author ThinkGem
 * @version 2013-10-15
 */
@Service
@Transactional(readOnly = true)
public class SchemeServiceImpl extends CrudServiceImpl<SchemeDao, Scheme> implements SchemeService {

	@Autowired
	private SchemeDao schemeDao;
//	@Autowired
//	private TemplateDao templateDao;
	@Autowired
	private TableDao tableDao;
	@Autowired
	private TableColumnDao tableColumnDao;
	
	public Scheme get(String id) {
		return schemeDao.get(id);
	}
	
	public Page<Scheme> find(Page<Scheme> page, Scheme scheme) {
		GenUtils.getTemplatePath();
		scheme.setPage(page);
		page.setList(schemeDao.findList(scheme));
		return page;
	}
	
	@Transactional(readOnly = false)
	public void save(Scheme scheme) {
		if (StringUtils.isBlank(scheme.getId())){
			scheme.preInsert();
			schemeDao.insert(scheme);
		}else{
			scheme.preUpdate();
			schemeDao.update(scheme);
		}
		// 生成代码
		if ("1".equals(scheme.getFlag())){
			scheme.setGenerateCode(generateCode(scheme));
		}
	}
	
	@Transactional(readOnly = false)
	public void delete(Scheme scheme) {
		schemeDao.delete(scheme);
	}
	
	private String generateCode(Scheme scheme){

		StringBuilder result = new StringBuilder();
		
		// 查询主表及字段列
		Table table = tableDao.get(scheme.getTable().getId());
		table.setColumnList(tableColumnDao.findList(new TableColumn(new Table(table.getId()))));
		
		// 获取所有代码模板
		Config config = GenUtils.getConfig();
		
		// 获取模板列表
		List<Template> templateList = GenUtils.getTemplateList(config, scheme.getCategory(), false);
		List<Template> childTableTemplateList = GenUtils.getTemplateList(config, scheme.getCategory(), true);
		
		// 如果有子表模板，则需要获取子表列表
		if (childTableTemplateList.size() > 0){
			Table parentTable = new Table();
			parentTable.setParentTable(table.getName());
			table.setChildList(tableDao.findList(parentTable));
		}
		
		// 生成子表模板代码
		for (Table childTable : table.getChildList()){
			childTable.setParent(table);
			childTable.setColumnList(tableColumnDao.findList(new TableColumn(new Table(childTable.getId()))));
			scheme.setTable(childTable);
			Map<String, Object> childTableModel = GenUtils.getDataModel(scheme);
			for (Template tpl : childTableTemplateList){
				result.append(GenUtils.generateToFile(tpl, childTableModel, scheme.getReplaceFile()));
			}
		}
		
		// 生成主表模板代码
		scheme.setTable(table);
		Map<String, Object> model = GenUtils.getDataModel(scheme);
		for (Template tpl : templateList){
			result.append(GenUtils.generateToFile(tpl, model, scheme.getReplaceFile()));
		}
		return result.toString();
	}
}
