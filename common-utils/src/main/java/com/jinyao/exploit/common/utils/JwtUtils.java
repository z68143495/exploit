package com.jinyao.exploit.common.utils;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.interfaces.Claim;
import com.auth0.jwt.interfaces.DecodedJWT;
import com.auth0.jwt.interfaces.JWTVerifier;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * jwt工具类
 * tm 2019/8/24 14:59
 */
public class JwtUtils {

    private static String SECRET = "tm123456"; // 秘钥
//    private static int EXPIRES_TIME = 30*60;   // 超时时间（秒）
    private static int EXPIRES_TIME = 20;   // 超时时间（秒）
    public static String AUTHORIZATION = "authorization";   // token请求头的key值

    /**
     * 从请求头authorization中获取token
     *
     * @param authorization
     * @return
     */
    public static String getTokenByAuthorization(String authorization) {
        String token = "";
        // 如果有token，则把前面的bearer去掉，并清除空格，即为token
        if (StringUtils.isNotBlank(authorization)) {
            token = authorization.replaceAll("Bearer", "").trim();
        }
        return token;
    }

    /**
     * 生成token
     * @param userId 用户id
     * @return
     */
    public static String getToken(Long userId) {
        Map<String, Object> map = new HashMap<>();
        map.put("alg", "HS256");
        map.put("typ", "JWT");
        String token = JWT.create()
                .withHeader(map)//header
                .withClaim("userId", userId)//payload
                .withExpiresAt(DateUtils.addSeconds(new Date(), EXPIRES_TIME)) // 超时时间
                .sign(Algorithm.HMAC256(SECRET));//加密
        return token;
    }

    /**
     * 校验token
     * @param token
     * @return 用户id
     */
    public static boolean verifyToken(String token){
        try {
            JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET)).build();
            verifier.verify(token);
            return true;
        }catch (Exception e){
            return false;
        }
    }

    /**
     * 获取token中的信息
     * @param jwt 校验后的返回对象
     * @param key 需要获取的key
     * @return 用户id
     */
    public static String verifyToken(DecodedJWT jwt, String key){
        Map<String, Claim> claims = jwt.getClaims();
        return claims.get(key).asString();
    }

    public static void main(String[] args) {
        System.out.println(verifyToken("32131312"));
    }
}
